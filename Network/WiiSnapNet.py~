#WiiSnap by Technoboy10
import SimpleHTTPServer
class CORSHTTPRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def send_head(self):
	path = self.path
	print path
	if 'setled' in path:
		regex = re.compile("\/setled([0-9]+)")
		m = regex.match(path)
		led = m.group(1)
		wm.led = int(led)
	elif 'rumble' in path:
		regex = re.compile('\/rumble(on|off)')
		m = regex.match(path)
		setr = m.group(1)
		if setr == 'on':
			wm.rumble = 1
		elif setr == 'off':
			wm.rumble = 0
	elif 'getled' in path:
		led = wm.state['led']
		f = open(ospath + '/return', 'w+')
		f.write(str(led))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'wmx' in path:
		x = wm.state['acc'][0]
		f = open(ospath + '/return', 'w+')
		f.write(str(x))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'wmy' in path:
		y = wm.state['acc'][1]
		f = open(ospath + '/return', 'w+')
		f.write(str(y))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'wmz' in path:
		z = wm.state['acc'][2]
		f = open(ospath + '/return', 'w+')
		f.write(str(z))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'battery' in path:
		battery = wm.state['battery']
		f = open(ospath + '/return', 'w+')
		f.write(str(battery))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'buttons' in path:
		buttons = wm.state['buttons']
		f = open(ospath + '/return', 'w+')
		f.write(str(buttons))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'nunchukbtn' in path:
		buttons = wm.state['nunchuk']['buttons']
		f = open(ospath + '/return', 'w+')
		f.write(str(buttons))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'nunchukx' in path:
		x = wm.state['nunchuk']['acc'][0]
		f = open(ospath + '/return', 'w+')
		f.write(str(x))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'nunchuky' in path:
		y = wm.state['nunchuk']['acc'][1]
		f = open(ospath + '/return', 'w+')
		f.write(str(y))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'nunchukz' in path:
		z = wm.state['nunchuk']['acc'][2]
		f = open(ospath + '/return', 'w+')
		f.write(str(z))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'nunchukstickx' in path:
		x = wm.state['nunchuk']['stick'][0]
		f= open(ospath + '/return', 'w+')
		f.write(str(x))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'nunchuksticky' in path:
		y = wm.state['nunchuk']['stick'][1]
		f= open(ospath + '/return', 'w+')
		f.write(str(y))
		f.close()
		f = open(ospath + '/return', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
	elif 'blocks' in path:
		f = open(ospath + '/WiiSnap.xml', 'rb')
		ctype = self.guess_type(ospath + '/return')
		self.send_response(200)
	        self.send_header("Content-type", ctype)
	        fs = os.fstat(f.fileno())
	        self.send_header("Content-Length", str(fs[6]))
	        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))
	        self.send_header("Access-Control-Allow-Origin", "*")
	        self.end_headers()
		return f
if __name__ == "__main__":
    print "WiiSnap by Technoboy10"
    import sys
    import re
    import os
    import SocketServer
    import cwiid
    ospath = os.path.abspath('')
    print "Please connect a Wiimote by pressing 1 and 2 on your Wiimote."
    #try:
    wm = cwiid.Wiimote()
    wm.rpt_mode = cwiid.RPT_BTN | cwiid.RPT_ACC | cwiid.RPT_MOTIONPLUS | cwiid.RPT_NUNCHUK
    PORT = 1280 #Major device code for a Wiimote

    Handler = CORSHTTPRequestHandler
    #Handler = SimpleHTTPServer.SimpleHTTPRequestHandler

    httpd = SocketServer.TCPServer(("", PORT), Handler)

    print "serving at port", PORT
    print "Go ahead and launch Snap!."
    sys.stdout.write("""
<a href="http://snap.berkeley.edu/snapsource/snap.html#open:https://raw.github.com/Technoboy10/wiisnap/master/WiiSnap.xml>start Snap!</a>
""".format(location="/Applications/whatever.app", file="whatever"))
    try:
        httpd.serve_forever()
    except:
        print "Something went wrong with the server. Please try again in a few minutes."

